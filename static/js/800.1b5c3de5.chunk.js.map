{"version":3,"file":"static/js/800.1b5c3de5.chunk.js","mappings":"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","sources":["api/errorHandler.ts","api/customAxios.ts","api/notion.ts","components/Loading.tsx","components/custom/DChip.tsx","pages/resume/card/SubListItem.tsx","pages/resume/card/CardListItem.tsx","components/custom/ToggleChip.tsx","pages/resume/filter/FilterOption.tsx","utils/String.tsx","pages/resume/pointStack/Card.tsx","constants/StackContent.tsx","pages/resume/Main.tsx"],"sourcesContent":["import { AxiosError, AxiosInstance, InternalAxiosRequestConfig, AxiosResponse } from 'axios';\n\n// https://dev.to/vikirobles/how-to-create-an-auth-login-system-with-axios-interceptors-typescript-2k11\ninterface ResponseData {\n  data?: string;\n}\n\nconst logOnDev = (message: string) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(message);\n  }\n};\n\nfunction handleError(serverError: ResponseData) {\n  if (serverError?.data) {\n    console.log('handleError', serverError);\n  }\n}\n\nconst onRequest = (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {\n  const { method, url } = config;\n  logOnDev(`🚀 [API] ${method?.toUpperCase()} ${url} | Request`);\n  return config;\n};\n\nconst onResponse = (response: AxiosResponse): AxiosResponse => {\n  const { method, url } = response.config;\n  const { status } = response;\n  logOnDev(`🚀 [API] ${method?.toUpperCase()} ${url} | Response ${status}`);\n  return response;\n};\n\nconst onResponseError = (error: AxiosError): Promise<AxiosError> => {\n  handleError(error?.response as ResponseData);\n  return Promise.reject(error);\n};\n\nexport default function setupInterceptorsTo(axiosInstance: AxiosInstance): AxiosInstance {\n  axiosInstance.interceptors.request.use(onRequest);\n  axiosInstance.interceptors.response.use(onResponse, onResponseError);\n\n  return axiosInstance;\n}\n","import axios, { AxiosInstance } from 'axios';\n\nimport setupInterceptorsTo from './errorHandler';\n\nconst SERVER_ADDRESS = process.env.REACT_APP_BACK_END_POINT;\n\nconst customAxios: AxiosInstance = axios.create({\n  baseURL: `${SERVER_ADDRESS}`, // 기본 서버 주소 입력\n  timeout: 6000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nsetupInterceptorsTo(customAxios);\n\nexport default customAxios;\n","import customAxios from './customAxios';\n\ninterface MultiOptionsProperty {\n  property: string;\n}\n\nexport async function getCompanies() {\n  const response = await customAxios.get<NotionData[]>('/company');\n  return response.data;\n}\n\nexport async function getProjects() {\n  const response = await customAxios.get<NotionData[]>('/project');\n  return response.data;\n}\n\nexport async function getStackOptions(data: MultiOptionsProperty) {\n  const response = await customAxios.get<NotionSelectOptions>('/options', { params: data });\n  return response.data.multi_select.options;\n}\n\nexport async function getMainStackOptions() {\n  const response = await customAxios.get<SelectProperty[]>('/mainOptions');\n  return response.data;\n}\n","import React from 'react';\n\nimport './Loading.scss';\nimport loadingImage from 'assets/images/apng_loader-ball.png';\n\nconst Loading = () => {\n  return (\n    <div className='loading__container'>\n      <img src={loadingImage} loading='lazy' alt='loadingImage' />\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport CheckIcon from '@mui/icons-material/Check';\n\nimport { red, purple, yellow, orange, blueGrey, pink, cyan, green, blue, brown } from '@mui/material/colors';\ninterface SelectChipColor {\n  [color: string]: ActionComponentColor;\n}\ninterface ActionComponentColor {\n  bg: string;\n  text: string;\n}\n\n// TODO: module화 해서 밖으로 빼기;;;\nconst notionSelect: SelectChipColor = {\n  red: {\n    bg: red[100],\n    text: red[600],\n  },\n  brown: {\n    bg: brown[100],\n    text: brown[600],\n  },\n  purple: {\n    bg: purple[100],\n    text: purple[600],\n  },\n  yellow: {\n    bg: yellow[100],\n    text: yellow[900],\n  },\n  green: {\n    bg: green[100],\n    text: green[600],\n  },\n  blue: {\n    bg: blue[100],\n    text: blue[600],\n  },\n  orange: {\n    bg: orange[100],\n    text: orange[600],\n  },\n  default: {\n    bg: cyan[100],\n    text: cyan[600],\n  },\n  gray: {\n    bg: blueGrey[100],\n    text: blueGrey[600],\n  },\n  pink: {\n    bg: pink[100],\n    text: pink[600],\n  },\n};\n\nfunction DChip({ selected, color, size, label, clickable, parentFunction }: CustomChip) {\n  const handleClick = (): void => {\n    if (parentFunction) {\n      parentFunction(label);\n    }\n  };\n\n  let icon;\n\n  if (selected) {\n    icon = <CheckIcon />;\n  }\n  let notionColor = { bg: 'default', text: 'grey' };\n  if (notionSelect[color]) {\n    notionColor = notionSelect[color];\n  }\n\n  const applyColor = selected || !clickable;\n\n  const customTheme = createTheme({\n    components: {\n      MuiChip: {\n        styleOverrides: {\n          root: {\n            backgroundColor: applyColor ? notionColor.bg : 'default',\n            color: applyColor ? notionColor.text : 'grey',\n            borderColor: applyColor ? notionColor.text : 'grey',\n          },\n        },\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={customTheme}>\n      <Chip\n        label={<div className='dChip__label'> {label}</div>}\n        size={size}\n        variant='outlined'\n        icon={icon}\n        clickable={clickable}\n        onClick={handleClick}\n      />\n    </ThemeProvider>\n  );\n}\n\nexport default DChip;\n","import React from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\n\nimport LabelIcon from '@mui/icons-material/Label';\nimport Stack from '@mui/material/Stack';\nimport DChip from 'components/custom/DChip';\n\nfunction SubListItem(props: SubListProps) {\n  const { id, name, numberOfParticipants, explain, period, stacks, contents, url }: ProjectQuery = props.info;\n  const { isPrintMode } = useAppSelector((state: RootState) => state.settings);\n  const mode = isPrintMode ? 'print' : '';\n\n  return (\n    <div className='project__container' key={`project__${id}`}>\n      <div className='list__item list__item--vertical'>\n        <a\n          className='title__link'\n          onClick={() => {\n            window.open(url);\n          }}\n        >\n          <LabelIcon fontSize='small' className='text text__icon--pre' />\n          <span className='text text__subTitle'>{name}</span>\n        </a>\n        <span className='numbers text__sub'>\n          | 참여인원: <span className='text__sub'>{numberOfParticipants}</span>\n        </span>\n      </div>\n      <div className='list__item explain'>\n        <span className='text text__plain'>{explain}</span>\n      </div>\n      <div className='list__item period'>\n        <span className='text text__plain'>{period}</span>\n      </div>\n      <div className='list__item stacks'>\n        <ul className={isPrintMode ? `list__container--${mode}` : 'list__container'}>\n          <Stack className='stacks' direction='row' spacing={1}>\n            {stacks.map((select: SelectProperty) => (\n              <DChip\n                key={`stacks__${select.id}`}\n                size='small'\n                color={select.color}\n                label={select.name}\n                clickable={false}\n              />\n            ))}\n          </Stack>\n        </ul>\n      </div>\n      <div className='list__item results'>\n        {contents.map((text: string, index: number) => (\n          <span key={`result_content_${index}`} className='text text__plain'>\n            {text}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SubListItem;\n","import React, { useMemo } from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\n\nimport SubListItem from './SubListItem';\nfunction CardListItem(props: CardListProps) {\n  const { startDate, endDate, period, name, role, department, id }: CompanyQuery = props.info;\n  const { isPrintMode } = useAppSelector((state: RootState) => state.settings);\n  const mode = isPrintMode ? 'print' : '';\n\n  const isWave = useMemo(() => (startDate !== '' ? `~` : null), []);\n  const periodString = startDate !== '' ? `${startDate} ${isWave} ${endDate} / ${period}` : '';\n  return (\n    <>\n      <div\n        key={`company__${id}`}\n        className={isPrintMode ? `box__container box__container--${mode}` : 'box__container'}\n        id={id}\n      >\n        <div className={isPrintMode ? `left left--${mode}` : 'left'}>\n          <span className='text text__sub period'>{startDate}</span>\n          <span className='text text__plain period'> {isWave} </span>\n          <span className='text text__sub period'>{endDate}</span>\n          <div className='text text__plain'>{period}</div>\n        </div>\n        <div className='right'>\n          <span className='text text__title'>{name}</span>\n          {isPrintMode ? <span className='text text__sub printMode'>{periodString}</span> : ''}\n          <div className='list chip'>\n            <span className='text text__plain'>{role}</span>\n            <span className='text text__plain'> / </span>\n            <span className='text text__plain'>{department}</span>\n          </div>\n          <div className='projects'>\n            {props.subInfo\n              ? props.subInfo\n                  .filter((project: { companyId: string }) => project.companyId === id)\n                  .map((project: ProjectQuery) => {\n                    return <SubListItem key={project.id} info={project} />;\n                  })\n              : null}\n          </div>\n        </div>\n      </div>\n\n      {props.isLastCompany ? '' : <hr className='line--bottom' />}\n    </>\n  );\n}\n\nexport default CardListItem;\n","import React from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\n\nimport { useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport CheckIcon from '@mui/icons-material/Check';\n\nconst ToggleChip = ({ selected, label, clickable, parentFunction }: CustomChip) => {\n  const handleClick = () => {\n    if (parentFunction) {\n      parentFunction(label);\n    }\n  };\n  const { pointColor } = useAppSelector((state: RootState) => state.settings);\n  const theme = useTheme();\n\n  let icon;\n\n  if (selected) {\n    icon = <CheckIcon />;\n  }\n\n  return (\n    <Chip\n      className={`chip__toggle chip__toggle--${theme.palette.mode}`}\n      sx={{ borderRadius: 1 }}\n      style={selected ? { color: pointColor, borderColor: pointColor } : { color: 'grey' }}\n      label={<div className='dChip__label'> {label}</div>}\n      size='small'\n      variant='outlined'\n      color={selected ? 'primary' : 'default'}\n      icon={icon}\n      clickable={clickable}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default ToggleChip;\n","import React from 'react';\n\nimport Stack from '@mui/material/Stack';\nimport DChip from 'components/custom/DChip';\nimport ToggleChip from 'components/custom/ToggleChip';\n\nimport { firstLetterToUpper } from 'utils/String';\n\ninterface Props {\n  type: string;\n  options: string[];\n  colorOptions?: SelectProperty[];\n  selected: FilterSelected;\n  onChange(option: string, key: string): void;\n}\n\nconst FilterOption = ({ type, options, colorOptions, selected, onChange }: Props) => {\n  const clickedChip = (state: string) => {\n    onChange(state, type);\n  };\n\n  return (\n    <li className='list__item'>\n      <div className='filter__left'>\n        <span className='text'>{firstLetterToUpper(type)}</span>\n      </div>\n      <div className='filter__chips'>\n        <Stack direction='row' flexWrap='wrap' spacing={1} useFlexGap>\n          {colorOptions\n            ? colorOptions.map((select: SelectProperty) => {\n                const { id, name, color } = select;\n                return (\n                  <DChip\n                    key={id}\n                    selected={selected[type].indexOf(name) !== -1}\n                    label={name}\n                    size='small'\n                    color={color}\n                    parentFunction={clickedChip}\n                  />\n                );\n              })\n            : options.map((name: string, index: number) => (\n                <ToggleChip\n                  key={`${type}_${index}`}\n                  selected={selected[type].indexOf(name) !== -1}\n                  label={name}\n                  color='primary'\n                  clickable={true}\n                  parentFunction={clickedChip}\n                />\n              ))}\n        </Stack>\n      </div>\n    </li>\n  );\n};\n\nexport default FilterOption;\n","export function firstLetterToUpper(string: string): string {\n  return string.replace(/\\b[a-z]/, (letter) => letter.toUpperCase());\n}\n","import React from 'react';\n\nimport './card.scss';\nimport CONTENT_SOCAR from '../../../constants/StackContent';\n\ninterface CardContentProperty {\n  content: string;\n  link?: string;\n  bold: string;\n}\n\nconst contents = CONTENT_SOCAR;\n\nconst PointStackCard = () => {\n  return (\n    <div className='card card__container'>\n      <h3 className='card__title'>간단 소개</h3>\n      <ul className='card__content'>\n        {contents.map((card: CardContentProperty) => {\n          const { content, link, bold } = card;\n          const [prefix, suffix] = content.split(bold);\n          if (bold !== '') {\n            return (\n              <li className='content__li' key={content}>\n                {prefix}{' '}\n                <a href={link}>\n                  <b>{bold}</b>\n                </a>{' '}\n                {suffix}\n              </li>\n            );\n          } else {\n            return (\n              <li className='content__li' key={content}>\n                {content}\n              </li>\n            );\n          }\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default PointStackCard;\n","const CONTENT_SOCAR = [\n  {\n    content: '웹 프론트엔드 개발 경력(Vue) 3년 이상인 사람',\n    link: 'https://dino100.notion.site/OHCOACH-Ultimate-fd838cf131fc4d718d2b4d89e7d42dd8',\n    bold: '개발 경력(Vue) 3년',\n  },\n  {\n    content: '웹 프론트엔드의 기본적인 지식(Javascript)을 중요하게 생각하는 사람',\n    link: 'https://github.com/juhee-playground/reading/blob/main/ModernJavascriptDeepDive/%EB%AA%A9%EC%B0%A8.md',\n    bold: '(Javascript)',\n  },\n  {\n    content: 'TypeScript - React.js 이용한 토이 프로젝트 경험 보유한 사람',\n    link: 'https://dino100.notion.site/135e25adcbe64a1da56c5510688fd50c',\n    bold: 'TypeScript - React.js',\n  },\n  {\n    content: 'Tailwind나 Bootstrap을 사용하지 않고도 마크업 개발(HTML, CSS)이 가능한 사람',\n    bold: '',\n  },\n  {\n    content: '팀 플레이 및 소통을 중요시 여기는 사람',\n    bold: '팀 플레이 및 소통',\n  },\n];\nexport default CONTENT_SOCAR;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\nimport { AxiosError } from 'axios';\nimport { format, differenceInYears, differenceInMonths } from 'date-fns';\n\nimport { getCompanies, getProjects, getStackOptions } from 'api/notion';\nimport { useQuery } from 'react-query';\n\nimport { useTheme } from '@mui/material/styles';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\n\nimport './Main.scss';\nimport Loading from 'components/Loading';\nimport CardListItem from 'pages/resume/card/CardListItem';\nimport FilterOption from './filter/FilterOption';\n\nimport COMPANY_DATA from 'data/DB_company.json';\nimport DB_STACK from 'data/DB_stack.json';\nimport PROJECT_DATA from 'data/DB_project.json';\nimport PointStackCard from './pointStack/Card';\n\nconst filterDefault = {\n  company: [],\n  stack: [],\n};\n\nexport default function Main() {\n  const [sortValue, setSortValue] = useState('N');\n  const [selectedChips, setSelectedChips] = useState<FilterSelected>(filterDefault);\n\n  const theme = useTheme();\n  const { isPrintMode } = useAppSelector((state: RootState) => state.settings);\n  const mode = isPrintMode ? 'print' : '';\n\n  const companyQuery = useQuery<NotionData[], AxiosError, NotionProperties[]>(\n    ['getCompanies'],\n    () => getCompanies(),\n    {\n      select: (query) =>\n        query.map((data) => {\n          return {\n            ...data.properties,\n            id: data.id,\n          };\n        }),\n    },\n  );\n\n  const { data, isLoading } = useQuery<NotionData[], AxiosError, NotionProperties[]>(\n    ['getProjects'],\n    async () => {\n      const response = await getProjects();\n      return response;\n    },\n    {\n      select: (query) =>\n        query.map((data) => {\n          return {\n            ...data.properties,\n            id: data.id,\n          };\n        }),\n    },\n  );\n\n  const mainStackSelectOptions = useQuery<SelectProperty[], AxiosError, SelectProperty[]>(\n    ['getStackOptions'],\n    () => getStackOptions({ property: 'mainStack' }),\n  );\n\n  const parseCompanyQuery: CompanyQuery[] = useMemo(() => {\n    if (!companyQuery.data) {\n      if (sortValue === 'O') {\n        COMPANY_DATA.reverse();\n      }\n\n      return COMPANY_DATA.filter((company) => {\n        const name = company.name;\n        const filtering = selectedChips.company?.includes(name);\n        return filtering;\n      }) as CompanyQuery[];\n    }\n\n    const companyData = companyQuery.data\n      .filter((company) => {\n        const name = company.name.title;\n        const filtering = selectedChips.company?.includes(name[0].plain_text);\n        return filtering;\n      })\n      .sort((firstObject: NotionProperties, secondObject: NotionProperties) => {\n        return firstObject.type.number > secondObject.type.number ? 1 : -1;\n      })\n      .map((company: NotionProperties) => {\n        const date = company.period.date;\n        let year = 0;\n        let month = 0;\n        let period = '';\n        if (date?.start) {\n          year = differenceInYears(new Date(date.end), new Date(date.start));\n          month = differenceInMonths(new Date(date.end), new Date(date.start));\n          const isZero = year !== 0 || month !== 0;\n          const noYear = year === 0;\n          const numberOfMonths = month - year * 12;\n          const noNumberOfMonths = numberOfMonths === 0;\n          period = `${isZero ? `(` : ''} \n            ${noYear ? '' : `${year}년`}\n            ${noNumberOfMonths ? '' : `${numberOfMonths}개월`} \n            ${isZero ? `)` : ''}`;\n        }\n        return {\n          id: company.id,\n          name: company.name.title[0].plain_text,\n          startDate: date?.start ? format(new Date(date.start), 'yyyy/MM') : '',\n          endDate: date?.start ? format(new Date(date.end), 'yyyy/MM') : '',\n          department: company.department.rich_text[0].plain_text,\n          role: company.role.select.name,\n          period,\n        } as CompanyQuery;\n      });\n\n    if (sortValue === 'O') {\n      return companyData.reverse();\n    }\n    return companyData;\n  }, [companyQuery.data, sortValue, selectedChips]);\n\n  const companyLength = parseCompanyQuery.length - 1;\n\n  const parseProjectQuery: ProjectQuery[] = useMemo(() => {\n    if (!data) {\n      return PROJECT_DATA.filter((project) => {\n        const stackInfo = JSON.stringify(project.stacks);\n        let isSelected = false;\n\n        selectedChips.stack.forEach((item) => {\n          const stackRegex = new RegExp(item);\n\n          if (!isSelected) {\n            isSelected = stackRegex.test(stackInfo);\n          }\n        });\n        return isSelected;\n      }) as ProjectQuery[];\n    }\n\n    const projectData = data\n      .filter((project) => {\n        const stackInfo = JSON.stringify(project.mainStack.multi_select);\n        let isSelected = false;\n\n        selectedChips.stack.forEach((item) => {\n          const stackRegex = new RegExp(item);\n\n          if (!isSelected) {\n            isSelected = stackRegex.test(stackInfo);\n          }\n        });\n        return isSelected;\n      })\n      .map((project: NotionProperties) => {\n        const date = project.period.date;\n        const results = project.result.rich_text[0];\n        return {\n          id: project.id,\n          companyId: project.company.relation[0].id,\n          name: project.name.title[0].plain_text,\n          period: date.start ? `${date.start}~${date.end === null ? '' : date.end}` : '',\n          stacks: [...project.mainStack.multi_select, ...project.stack.multi_select],\n          explain: project.explain.rich_text[0].plain_text,\n          contents: results.text.content.split('\\n'),\n          numberOfParticipants: project.numberOfParticipants.number,\n          url: project.url.url,\n        } as ProjectQuery;\n      });\n\n    return projectData;\n  }, [data, selectedChips]);\n\n  const companies = useMemo(\n    () =>\n      companyQuery.data\n        ? companyQuery.data.map((company) => company.name.title[0].plain_text)\n        : COMPANY_DATA.map((company) => company.name),\n    [companyQuery.data, COMPANY_DATA],\n  );\n\n  const stackOptions = useMemo(\n    () => (mainStackSelectOptions.data ? mainStackSelectOptions.data.map((select) => select.name) : DB_STACK),\n    [mainStackSelectOptions.data, DB_STACK],\n  );\n\n  const handleChange = (option: string, key: string) => {\n    setSelectedChips((prevChips: FilterSelected): FilterSelected => {\n      const newChips = JSON.parse(JSON.stringify(prevChips));\n      if (prevChips[key].includes(option)) {\n        newChips[key] = prevChips[key].filter((chip: string) => chip !== option);\n      } else {\n        newChips[key] = [...prevChips[key], option];\n      }\n      return newChips;\n    });\n  };\n\n  const handleChangeSelect = (event: SelectChangeEvent) => {\n    setSortValue(event.target.value);\n  };\n\n  useEffect(() => {\n    setSelectedChips((prev) => ({\n      ...prev,\n      company: [...companies],\n      stack: [...stackOptions],\n    }));\n  }, [companies, stackOptions]);\n\n  return (\n    <div\n      className={`section-right section-right--${theme.palette.mode} ${\n        isPrintMode ? `section-right--${mode}` : ''\n      }`}\n    >\n      {isLoading ? <Loading /> : null}\n      <section className={isPrintMode ? `action--${mode}` : 'action'}>\n        <ul className='filter__container'>\n          <FilterOption options={companies} type='company' selected={selectedChips} onChange={handleChange} />\n          <FilterOption\n            options={stackOptions}\n            colorOptions={mainStackSelectOptions.data}\n            type='stack'\n            selected={selectedChips}\n            onChange={handleChange}\n          />\n        </ul>\n        <div className='sort__container'>\n          <FormControl sx={{ m: 1, minWidth: 120 }} size='small'>\n            <InputLabel id='demo-select-small-label'>정렬방법</InputLabel>\n            <Select\n              className='sort__select-input'\n              labelId='demo-simple-select-label'\n              id='demo-select-small'\n              value={sortValue}\n              label='정렬방법'\n              onChange={handleChangeSelect}\n            >\n              <MenuItem sx={{ color: `${theme.palette.mode === 'dark' ? 'white' : 'black'}` }} value={'N'}>\n                최신순\n              </MenuItem>\n              <MenuItem sx={{ color: `${theme.palette.mode === 'dark' ? 'white' : 'black'}` }} value={'O'}>\n                오래된순\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n      </section>\n      <PointStackCard />\n      <section className={isPrintMode ? `career--${mode}` : 'career'}>\n        {parseCompanyQuery.map((company: CompanyQuery, index: number) => {\n          return (\n            <CardListItem\n              key={company.id}\n              info={company}\n              subInfo={parseProjectQuery}\n              isLastCompany={index === companyLength}\n            />\n          );\n        })}\n      </section>\n    </div>\n  );\n}\n"],"names":["logOnDev","message","process","onRequest","config","method","url","concat","toUpperCase","onResponse","response","_response$config","status","onResponseError","error","serverError","data","console","log","Promise","reject","axiosInstance","customAxios","axios","baseURL","timeout","headers","interceptors","request","use","_getCompanies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","abrupt","stop","apply","arguments","getProjects","_getProjects","_callee2","_context2","_getStackOptions","_callee3","_context3","params","multi_select","options","_jsx","className","children","src","loadingImage","loading","alt","notionSelect","red","bg","text","brown","purple","yellow","green","blue","orange","default","cyan","gray","blueGrey","pink","_ref","icon","selected","color","size","label","clickable","parentFunction","CheckIcon","notionColor","applyColor","customTheme","createTheme","components","MuiChip","styleOverrides","root","backgroundColor","borderColor","ThemeProvider","theme","Chip","_jsxs","variant","onClick","props","_props$info","info","id","name","numberOfParticipants","explain","period","stacks","contents","isPrintMode","useAppSelector","state","settings","mode","window","open","LabelIcon","fontSize","Stack","direction","spacing","map","select","DChip","index","startDate","endDate","role","department","isWave","useMemo","periodString","_Fragment","subInfo","filter","project","companyId","SubListItem","isLastCompany","pointColor","useTheme","palette","sx","borderRadius","style","string","type","colorOptions","onChange","clickedChip","replace","letter","flexWrap","useFlexGap","indexOf","ToggleChip","content","link","bold","card","_content$split","split","_content$split2","_slicedToArray","prefix","suffix","href","filterDefault","company","stack","Main","_useState","useState","_useState2","sortValue","setSortValue","_useState3","_useState4","selectedChips","setSelectedChips","companyQuery","useQuery","getCompanies","query","_objectSpread","properties","_useQuery","isLoading","mainStackSelectOptions","_x","getStackOptions","property","parseCompanyQuery","COMPANY_DATA","_selectedChips$compan","includes","companyData","_selectedChips$compan2","title","plain_text","sort","firstObject","secondObject","number","date","year","month","start","differenceInYears","Date","end","differenceInMonths","isZero","noYear","numberOfMonths","noNumberOfMonths","format","rich_text","reverse","companyLength","length","parseProjectQuery","stackInfo","JSON","stringify","mainStack","isSelected","forEach","item","stackRegex","RegExp","test","results","result","relation","_toConsumableArray","PROJECT_DATA","companies","stackOptions","DB_STACK","handleChange","option","key","prevChips","newChips","parse","chip","useEffect","Loading","FilterOption","FormControl","m","minWidth","InputLabel","Select","labelId","value","event","target","MenuItem","PointStackCard","CardListItem"],"sourceRoot":""}