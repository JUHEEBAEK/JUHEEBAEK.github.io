{"version":3,"file":"static/js/702.b48cf152.chunk.js","mappings":"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","sources":["api/errorHandler.ts","api/customAxios.ts","components/Loading.tsx","utils/Parser.tsx","constants/NotionColorSet.tsx","components/custom/DChip.tsx","pages/resume/card/SubListItem.tsx","pages/resume/card/CardListItem.tsx","components/custom/ToggleChip.tsx","pages/resume/filter/FilterOption.tsx","utils/String.tsx","pages/resume/pointStack/Card.tsx","constants/StackContent.tsx","pages/resume/Main.tsx","api/notion.ts"],"sourcesContent":["import { AxiosError, AxiosInstance, InternalAxiosRequestConfig, AxiosResponse } from 'axios';\n\n// https://dev.to/vikirobles/how-to-create-an-auth-login-system-with-axios-interceptors-typescript-2k11\ninterface ResponseData {\n  data?: string;\n}\n\nconst logOnDev = (message: string) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(message);\n  }\n};\n\nfunction handleError(serverError: ResponseData) {\n  if (serverError?.data) {\n    console.log('handleError', serverError);\n  }\n}\n\nconst onRequest = (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {\n  const { method, url } = config;\n  logOnDev(`🚀 [API] ${method?.toUpperCase()} ${url} | Request`);\n  return config;\n};\n\nconst onResponse = (response: AxiosResponse): AxiosResponse => {\n  const { method, url } = response.config;\n  const { status } = response;\n  logOnDev(`🚀 [API] ${method?.toUpperCase()} ${url} | Response ${status}`);\n  return response;\n};\n\nconst onResponseError = (error: AxiosError): Promise<AxiosError> => {\n  handleError(error?.response as ResponseData);\n  return Promise.reject(error);\n};\n\nexport default function setupInterceptorsTo(axiosInstance: AxiosInstance): AxiosInstance {\n  axiosInstance.interceptors.request.use(onRequest);\n  axiosInstance.interceptors.response.use(onResponse, onResponseError);\n\n  return axiosInstance;\n}\n","import axios, { AxiosInstance } from 'axios';\n\nimport setupInterceptorsTo from './errorHandler';\n\nconst SERVER_ADDRESS = process.env.REACT_APP_BACK_END_POINT;\n\nconst customAxios: AxiosInstance = axios.create({\n  baseURL: `${SERVER_ADDRESS}`, // 기본 서버 주소 입력\n  timeout: 6000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nsetupInterceptorsTo(customAxios);\n\nexport default customAxios;\n","import React from 'react';\n\nimport './Loading.scss';\nimport loadingImage from 'assets/images/apng_loader-ball.png';\n\nconst Loading = () => {\n  return (\n    <div className='loading__container'>\n      <img src={loadingImage} loading='lazy' alt='loadingImage' />\n    </div>\n  );\n};\n\nexport default Loading;\n","import { differenceInYears, differenceInMonths } from 'date-fns';\n\nexport function parserPeriod(date: PeriodDate): string {\n  const year = differenceInYears(new Date(date.end), new Date(date.start));\n  const month = differenceInMonths(new Date(date.end), new Date(date.start));\n  const isZero = year !== 0 || month !== 0;\n  const noYear = year === 0;\n  const numberOfMonths = month - year * 12;\n  const noNumberOfMonths = numberOfMonths === 0;\n  const period = `${isZero ? `(` : ''}\n        ${noYear ? '' : `${year}년`}\n        ${noNumberOfMonths ? '' : `${numberOfMonths}개월`}\n        ${isZero ? `)` : ''}`;\n  return period;\n}\n","import { red, purple, yellow, orange, lightGreen, pink, grey, green, blue, brown } from '@mui/material/colors';\n\ninterface ActionComponentColor {\n  bg: string;\n  text: string;\n}\n\ninterface SelectChipColor {\n  [color: string]: ActionComponentColor;\n}\n\nexport const notionColorSet: SelectChipColor = {\n  red: {\n    bg: red[100],\n    text: red[600],\n  },\n  brown: {\n    bg: brown[100],\n    text: brown[600],\n  },\n  purple: {\n    bg: purple[100],\n    text: purple[600],\n  },\n  yellow: {\n    bg: yellow[100],\n    text: yellow[900],\n  },\n  green: {\n    bg: lightGreen[100],\n    text: lightGreen[600],\n  },\n  blue: {\n    bg: blue[100],\n    text: blue[600],\n  },\n  orange: {\n    bg: orange[100],\n    text: orange[600],\n  },\n  default: {\n    bg: grey[100],\n    text: grey[600],\n  },\n  gray: {\n    bg: green[100],\n    text: green[600],\n  },\n  pink: {\n    bg: pink[100],\n    text: pink[600],\n  },\n};\n","import React, { useState } from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { notionColorSet } from 'constants/NotionColorSet';\n\nfunction DChip({ color = 'deafult', selectedItems = [], size, label, clickable, handleChipSelect }: CustomChip) {\n  const isSelected = selectedItems.indexOf(label) > -1;\n  const [selected, setSelected] = useState(isSelected);\n\n  const handleClick = (): void => {\n    if (clickable) {\n      setSelected(prevState => !prevState);\n    }\n\n    if (handleChipSelect) {\n      handleChipSelect(label);\n    }\n  };\n\n  let icon;\n\n  if (selected && clickable) {\n    icon = <CheckIcon data-testid='check-icon' />;\n  }\n  let notionColor = { bg: 'default', text: 'grey' };\n  if (notionColorSet[color]) {\n    notionColor = notionColorSet[color];\n  }\n\n  const isMainSkillChip = color !== 'grey' && !clickable;\n  const customTheme = createTheme({\n    components: {\n      MuiChip: {\n        styleOverrides: {\n          root: {\n            backgroundColor: selected || isMainSkillChip ? notionColor.bg : 'default',\n            color: selected || isMainSkillChip ? notionColor.text : 'grey',\n            borderColor: selected || isMainSkillChip ? notionColor.bg : 'grey',\n          },\n        },\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={customTheme}>\n      <Chip\n        sx={{ borderRadius: 1 }}\n        label={<div className='dChip__label'> {label}</div>}\n        size={size}\n        variant='outlined'\n        icon={icon}\n        clickable={clickable}\n        onClick={handleClick}\n      />\n    </ThemeProvider>\n  );\n}\n\nexport default DChip;\n","import React from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\n\nimport LabelIcon from '@mui/icons-material/Label';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport DChip from 'components/custom/DChip';\n\nfunction SubListItem({ info, filters }: SubListProps) {\n  const date = info.period.date;\n  const boldSentence = info.experience.rich_text.filter(rich => rich.annotations.bold).map(rich => rich.plain_text);\n  const experience = info.experience.rich_text.map(rich => rich.text.content);\n  const content = experience.join('').split('\\n');\n  // FIXME: 비어 있을 경우 에러처리 해야함.\n  const projectData = {\n    id: info.id,\n    companyId: info.company.relation[0].id,\n    name: info.name.title[0].plain_text,\n    period: date.start ? `${date.start}~${date.end === null ? '' : date.end}` : '',\n    mainSkills: info.mainSkill.multi_select,\n    skills: info.skill.multi_select,\n    role: info.role.rich_text[0].plain_text,\n    description: info.description.rich_text[0].plain_text,\n    experience: content,\n    numberOfParticipants: info.numberOfParticipants.number,\n    url: info.url.url,\n  };\n\n  const { isPrintMode } = useAppSelector((state: RootState) => state.settings);\n  const mode = isPrintMode ? 'print' : '';\n\n  return (\n    <div className='project__container' key={`project__${projectData.id}`}>\n      <div className='list__item list__item--vertical'>\n        <a className='title__link' href={projectData.url} target='_blank' rel='noreferrer'>\n          <LabelIcon fontSize='small' className='text text__icon--pre' />\n          <Typography variant='subtitle1' className='text text__subTitle' gutterBottom>\n            {projectData.name}\n          </Typography>\n        </a>\n        <Box className='numbers text__sub'>\n          <Typography variant='caption' color='text.primary' className='text text__plain period' gutterBottom>\n            {projectData.period}\n          </Typography>\n        </Box>\n      </div>\n      <div>\n        <span className='text text__plain'>참여인원: </span>\n        <span className='text__sub'>{projectData.numberOfParticipants}</span>\n        <span className='text text__plain'> | 역활: </span>\n        <span className='text text__sub'> {projectData.role}</span>\n      </div>\n      <div className='list__item description'>\n        <span className='text text__plain'>{projectData.description}</span>\n      </div>\n      <div className='list__item period'></div>\n      <div className='list__item stacks'>\n        <ul className={isPrintMode ? `list__container--${mode}` : 'list__container'}>\n          <Stack className='stacks' direction='row' spacing={1}>\n            {projectData.mainSkills.map((select: SelectProperty) => (\n              <DChip\n                key={`mainSkill_${projectData.name}_${select.id}`}\n                size='small'\n                color={select.color}\n                label={select.name}\n                selectedItems={filters['skill']}\n                clickable={false}\n              />\n            ))}\n            {projectData.skills.map((select: SelectProperty, index: number) => (\n              <DChip\n                key={`skill_${projectData.name}_${select.name}_${index}`}\n                size='small'\n                color='grey'\n                label={select.name}\n                clickable={false}\n              />\n            ))}\n          </Stack>\n        </ul>\n      </div>\n      <div className='list__item experience'>\n        {projectData.experience.map((text: string) => {\n          const boldTexts = boldSentence.filter(bold => text.includes(bold));\n          const [first, last] = text.split(boldTexts[0]);\n          if (boldTexts.length > 0) {\n            return (\n              <>\n                <div key={text} className='contents'>\n                  <Typography variant='caption' className='text text__plain' gutterBottom>\n                    {first}\n                  </Typography>\n                  <Typography variant='caption' className='text text__plain text__bold' gutterBottom>\n                    {boldTexts[0]}\n                  </Typography>\n                  <Typography variant='caption' className='text text__plain' gutterBottom>\n                    {last}\n                  </Typography>\n                </div>\n              </>\n            );\n          } else {\n            return (\n              <Typography key={`content_${text}`} variant='caption' className='text text__plain' gutterBottom>\n                {text}\n              </Typography>\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default SubListItem;\n","import React, { useMemo } from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport { format } from 'date-fns';\nimport type { RootState } from 'redux/store';\n\nimport { parserPeriod } from 'utils/Parser';\nimport SubListItem from './SubListItem';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\n\nfunction CardListItem(props: CardListProps) {\n  const date = props.info.period.date;\n  const filters = props.filters;\n  const companyData = {\n    id: props.info.id,\n    name: props.info.name.title[0].plain_text,\n    description: props.info.description.rich_text[0].plain_text.split('- '),\n    type: props.info.type.rich_text[0].plain_text,\n    startDate: date?.start ? format(new Date(date.start), 'yyyy/MM') : '',\n    endDate: date?.start ? format(new Date(date.end), 'yyyy/MM') : '',\n    year: props.info.year.number,\n    scale: props.info.scale.rich_text[0].plain_text,\n    department: props.info.department.rich_text[0].plain_text,\n    role: props.info.role.select.name,\n    period: date?.start ? parserPeriod(date) : '',\n  };\n\n  const { isPrintMode, pointColor } = useAppSelector((state: RootState) => state.settings);\n  const mode = isPrintMode ? 'print' : '';\n\n  const isWave = useMemo(() => (companyData.startDate !== '' ? `~` : null), []);\n  return (\n    <>\n      <div\n        key={`company__${companyData.id}`}\n        className={isPrintMode ? `box__container box__container--${mode}` : 'box__container'}\n        id={companyData.id}\n      >\n        <div className='box__header'>\n          <div className='row row__first'>\n            <span className='text text__title'>{companyData.name}</span>\n            <Box className='period__groups'>\n              <Typography variant='caption' color='text.primary' className='text text__sub period'>\n                {companyData.startDate}\n              </Typography>\n              <Typography variant='caption' color='text.primary' className='text text__plain period'>\n                {isWave}\n              </Typography>\n              <Typography variant='caption' color='text.primary' className='text text__sub period'>\n                {companyData.endDate}\n              </Typography>\n              <Typography variant='caption' color='text.primary' className='text text__plain period'>\n                {companyData.period}\n              </Typography>\n            </Box>\n          </div>\n          {companyData.type === 'C' ? (\n            <div className='row row__second'>\n              <span className='text text__sub'>{companyData.role}</span>\n              <span className='text text__plain'> | </span>\n              <span className='text text__sub'>{companyData.department}</span>\n              <span className='text text__plain'> | 설립년도:</span>\n              <span className='text text__sub'> {companyData.year}</span>\n              <span className='text text__plain'> | 회사규모: </span>\n              <span className='text text__sub'> {companyData.scale}</span>\n            </div>\n          ) : (\n            ''\n          )}\n\n          <div className='row row__third'>\n            {companyData.description.map((description, index) => {\n              return (\n                <span key={`description_${index}`} className='text text__plain'>\n                  {description}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n        <div className='group__header'>\n          <h4 style={{ color: pointColor }} className='box-title'>\n            WORK EXPERIENCE\n          </h4>\n        </div>\n        <div className='projects'>\n          {props.subInfo\n            ? props.subInfo\n                .filter(project => project.company.relation[0].id === companyData.id)\n                .map((project: ProjectProperties) => {\n                  return <SubListItem key={project.id} filters={filters} info={project} />;\n                })\n            : null}\n        </div>\n      </div>\n      {props.isLastCompany ? '' : <hr className='line--bottom' />}\n    </>\n  );\n}\n\nexport default CardListItem;\n","import React, { useState } from 'react';\n\nimport { useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport CheckIcon from '@mui/icons-material/Check';\n\nconst ToggleChip = ({ label, pointColor, handleChipSelect }: CustomChip) => {\n  const [selected, setSelected] = useState(true);\n  const handleClick = () => {\n    setSelected(prevState => !prevState);\n    if (handleChipSelect) {\n      handleChipSelect(label);\n    }\n  };\n  const theme = useTheme();\n\n  let icon;\n\n  if (selected) {\n    icon = <CheckIcon data-testid='check-icon' />;\n  }\n\n  return (\n    <Chip\n      className={`chip__toggle chip__toggle--${theme.palette.mode}`}\n      sx={{ borderRadius: 1 }}\n      style={selected ? { color: pointColor, borderColor: pointColor } : { color: 'grey' }}\n      label={label}\n      size='small'\n      variant='outlined'\n      color={selected ? 'primary' : 'default'}\n      icon={icon}\n      clickable\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default ToggleChip;\n","import React from 'react';\n\nimport Stack from '@mui/material/Stack';\nimport DChip from 'components/custom/DChip';\nimport ToggleChip from 'components/custom/ToggleChip';\n\nimport { firstLetterToUpper } from 'utils/String';\n\ninterface Props {\n  type: string;\n  options: string[];\n  colorOptions?: SelectProperty[];\n  pointColor?: string;\n  selected: FilterSelected;\n  onChange(option: string, key: string): void;\n}\n\nconst FilterOption = ({ type, options, colorOptions, pointColor = 'primary', selected, onChange }: Props) => {\n  const clickedChip = (state: string) => {\n    onChange(state, type);\n  };\n\n  return (\n    <li className='list__item'>\n      <div className='filter__left'>\n        <span className='text'>{firstLetterToUpper(type)}</span>\n      </div>\n      <div className='filter__chips'>\n        <Stack direction='row' flexWrap='wrap' spacing={1} useFlexGap>\n          {colorOptions\n            ? colorOptions.map((select: SelectProperty) => {\n                const { id, name, color } = select;\n                return (\n                  <DChip\n                    key={id}\n                    selectedItems={selected[type]}\n                    label={name}\n                    size='small'\n                    color={color}\n                    clickable\n                    handleChipSelect={clickedChip}\n                  />\n                );\n              })\n            : options.map((name: string, index: number) => (\n                <ToggleChip key={`${type}_${index}`} label={name} color={pointColor} handleChipSelect={clickedChip} />\n              ))}\n        </Stack>\n      </div>\n    </li>\n  );\n};\n\nexport default FilterOption;\n","export function firstLetterToUpper(string: string): string {\n  return string.replace(/\\b[a-z]/, letter => letter.toUpperCase());\n}\n","import React from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\n\nimport './card.scss';\nimport CONTENT_MAIN from '../../../constants/StackContent';\n\ninterface CardContentProperty {\n  content: string;\n  link?: string;\n  bold: string;\n}\n\nconst contents = CONTENT_MAIN;\n\nconst PointStackCard = () => {\n  const { pointColor } = useAppSelector((state: RootState) => state.settings);\n  return (\n    <div className='card card__container'>\n      <div className='group__header'>\n        <span className='box-icon'>⚽️</span>\n        <h4 style={{ color: pointColor }} className='box-title'>\n          OVERVIEW\n        </h4>\n      </div>\n      <ul className='card__content'>\n        {contents.map((card: CardContentProperty) => {\n          const { content, link, bold } = card;\n          const [prefix, suffix] = content.split(bold);\n          if (bold !== '') {\n            return (\n              <li className='content__li' key={content}>\n                {prefix}{' '}\n                <a href={link}>\n                  <b>{bold}</b>\n                </a>{' '}\n                {suffix}\n              </li>\n            );\n          } else {\n            return (\n              <li className='content__li' key={content}>\n                {content}\n              </li>\n            );\n          }\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default PointStackCard;\n","const CONTENT_MAIN = [\n  {\n    content: '웹 프론트엔드 개발 실무 경력(Vue)이 3년 이상인 사람',\n    link: 'https://dino100.notion.site/OHCOACH-Ultimate-fd838cf131fc4d718d2b4d89e7d42dd8',\n    bold: '개발 실무 경력(Vue)이 3년',\n  },\n  {\n    content: '웹 프론트엔드의 기본적인 지식(Javascript)을 중요하게 생각하는 사람',\n    link: 'https://github.com/juhee-playground/reading/blob/main/ModernJavascriptDeepDive/%EB%AA%A9%EC%B0%A8.md',\n    bold: '(Javascript)',\n  },\n  {\n    content: 'TypeScript - React.js 이용한 토이 프로젝트 경험 보유한 사람',\n    link: 'https://dino100.notion.site/135e25adcbe64a1da56c5510688fd50c',\n    bold: 'TypeScript - React.js',\n  },\n  {\n    content: '팀 플레이 및 소통을 중요시 여기는 사람',\n    bold: '팀 플레이 및 소통',\n  },\n];\nexport default CONTENT_MAIN;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { useAppSelector } from 'redux/hooks';\nimport type { RootState } from 'redux/store';\nimport { AxiosError } from 'axios';\n\nimport { getCompanies, getProjects, getSkillOptions } from 'api/notion';\nimport { useQuery } from 'react-query';\n\nimport { useTheme } from '@mui/material/styles';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\n\nimport './Main.scss';\nimport Loading from 'components/Loading';\nimport CardListItem from 'pages/resume/card/CardListItem';\nimport FilterOption from './filter/FilterOption';\n\nimport COMPANY_DATA from 'data/DB_company.json';\nimport DB_SKILL from 'data/DB_skill.json';\nimport PROJECT_DATA from 'data/DB_project.json';\nimport PointStackCard from './pointStack/Card';\n\nconst filterDefault = {\n  company: [],\n  skill: [],\n};\n\nexport default function Main() {\n  const DB_COMPANY_DATAS = COMPANY_DATA as CompanyProperties[];\n  const DB_PROJECT_DATAS = PROJECT_DATA as ProjectProperties[];\n  const [sortValue, setSortValue] = useState('N');\n  const [selectedChips, setSelectedChips] = useState<FilterSelected>(filterDefault);\n\n  const theme = useTheme();\n  const { pointColor, isPrintMode } = useAppSelector((state: RootState) => state.settings);\n  const mode = isPrintMode ? 'print' : '';\n\n  const companyQuery = useQuery<NotionData[], AxiosError, CompanyProperties[]>(['getCompanies'], () => getCompanies(), {\n    select: query =>\n      query.map(data => {\n        return {\n          ...data.properties,\n          id: data.id,\n        };\n      }),\n  });\n\n  const projectQuery = useQuery<NotionData[], AxiosError, ProjectProperties[]>(\n    ['getProjects'],\n    async () => {\n      const response = await getProjects();\n      return response;\n    },\n    {\n      select: query =>\n        query.map(data => {\n          return {\n            ...data.properties,\n            id: data.id,\n          };\n        }),\n    },\n  );\n\n  const mainSkillSelectOptions = useQuery<SelectProperty[], AxiosError, SelectProperty[]>(['getSkillOptions'], () =>\n    getSkillOptions({ property: 'mainSkill' }),\n  );\n\n  const companiesData = companyQuery.data === undefined ? DB_COMPANY_DATAS : companyQuery.data;\n  const projectsData = projectQuery.data === undefined ? DB_PROJECT_DATAS : projectQuery.data;\n  const toyProjectData = companiesData.filter(company => company.type.rich_text[0].plain_text === 'T');\n\n  const parseCompanyQuery: CompanyProperties[] = useMemo(() => {\n    const companyData = companiesData\n      .filter((company: CompanyProperties) => {\n        const filtering = selectedChips.company?.includes(company.name.title[0].plain_text);\n        return filtering;\n      })\n      .sort((firstObject: CompanyProperties, secondObject: CompanyProperties) => {\n        return firstObject.order.number > secondObject.order.number ? 1 : -1;\n      });\n\n    if (sortValue === 'O') {\n      return companyData.reverse();\n    }\n\n    return companyData;\n  }, [companyQuery.data, sortValue, selectedChips]);\n\n  const companyLength = parseCompanyQuery.length - 1;\n\n  const parseProjectQuery: ProjectProperties[] = useMemo(() => {\n    const projectData = projectsData.filter((project: ProjectProperties) => {\n      const skillInfo = JSON.stringify(project.mainSkill.multi_select);\n      let isSelected = false;\n\n      selectedChips.skill.forEach(item => {\n        const skillRegex = new RegExp(item);\n\n        if (!isSelected) {\n          isSelected = skillRegex.test(skillInfo);\n        }\n      });\n      return isSelected;\n    });\n    return projectData;\n  }, [projectQuery, selectedChips]);\n\n  const companies = useMemo(\n    () =>\n      companiesData\n        .filter(company => company.type.rich_text[0].plain_text === 'C')\n        .map(company => company.name.title[0].plain_text),\n    [companyQuery.data, DB_COMPANY_DATAS],\n  );\n\n  const skillOptions = useMemo(\n    () => (mainSkillSelectOptions.data ? mainSkillSelectOptions.data.map(select => select.name) : DB_SKILL),\n    [mainSkillSelectOptions.data, DB_SKILL],\n  );\n\n  const handleChange = (option: string, key: string) => {\n    setSelectedChips((prevChips: FilterSelected): FilterSelected => {\n      const newChips = JSON.parse(JSON.stringify(prevChips));\n      if (prevChips[key].includes(option)) {\n        newChips[key] = prevChips[key].filter((chip: string) => chip !== option);\n      } else {\n        newChips[key] = [...prevChips[key], option];\n      }\n      return newChips;\n    });\n  };\n\n  const handleChangeSelect = (event: SelectChangeEvent) => {\n    setSortValue(event.target.value);\n  };\n\n  useEffect(() => {\n    setSelectedChips(prev => ({\n      ...prev,\n      company: [...companies],\n      skill: [...skillOptions],\n    }));\n  }, [companies, skillOptions]);\n\n  return (\n    <div\n      className={`section-right section-right--${theme.palette.mode} ${isPrintMode ? `section-right--${mode}` : ''}`}\n    >\n      {projectQuery.isLoading ? <Loading /> : null}\n      <section className={isPrintMode ? `action--${mode}` : 'action'}>\n        <ul className='filter__container'>\n          <FilterOption\n            options={companies}\n            type='company'\n            selected={selectedChips}\n            pointColor={pointColor}\n            onChange={handleChange}\n          />\n          <FilterOption\n            options={skillOptions}\n            colorOptions={mainSkillSelectOptions.data}\n            type='skill'\n            selected={selectedChips}\n            onChange={handleChange}\n          />\n        </ul>\n        <div className='sort__container'>\n          <FormControl sx={{ m: 1, minWidth: 120 }} size='small'>\n            <InputLabel id='demo-select-small-label'>정렬방법</InputLabel>\n            <Select\n              className='sort__select-input'\n              labelId='demo-simple-select-label'\n              id='demo-select-small'\n              value={sortValue}\n              label='정렬방법'\n              onChange={handleChangeSelect}\n            >\n              <MenuItem sx={{ color: `${theme.palette.mode === 'dark' ? 'white' : 'black'}` }} value={'N'}>\n                최신순\n              </MenuItem>\n              <MenuItem sx={{ color: `${theme.palette.mode === 'dark' ? 'white' : 'black'}` }} value={'O'}>\n                오래된순\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n        <hr className='hrBasic' />\n      </section>\n      <PointStackCard />\n      <hr className='hrBasic' />\n      <section className='career'>\n        <div className='group__header'>\n          <span className='box-icon'>⚽️</span>\n          <h4 style={{ color: pointColor }} className='box-title'>\n            CAREER\n          </h4>\n        </div>\n        {parseCompanyQuery.map((company: CompanyProperties, index: number) => {\n          return (\n            <CardListItem\n              key={company.id}\n              info={company}\n              subInfo={parseProjectQuery}\n              filters={selectedChips}\n              isLastCompany={index === companyLength}\n            />\n          );\n        })}\n      </section>\n      <hr className='hrBasic' />\n      <section className='career'>\n        <div className='group__header'>\n          <span className='box-icon'>⚽️</span>\n          <h4 style={{ color: pointColor }} className='box-title'>\n            SIDE PROJECT\n          </h4>\n        </div>\n        {toyProjectData\n          .filter(company => company.type.rich_text[0].plain_text === 'T')\n          .map((company: CompanyProperties, index: number) => {\n            return (\n              <CardListItem\n                key={company.id}\n                info={company}\n                filters={selectedChips}\n                subInfo={parseProjectQuery}\n                isLastCompany={index === companyLength}\n              />\n            );\n          })}\n      </section>\n    </div>\n  );\n}\n","import customAxios from './customAxios';\n\ninterface MultiOptionsProperty {\n  property: string;\n}\n\nexport async function getCompanies() {\n  const response = await customAxios.get<NotionData[]>('/company');\n  return response.data;\n}\n\nexport async function getProjects() {\n  const response = await customAxios.get<NotionData[]>('/project');\n  return response.data;\n}\n\nexport async function getSkillOptions(data: MultiOptionsProperty) {\n  const response = await customAxios.get<NotionSelectOptions>('/options', { params: data });\n  return response.data.multi_select.options;\n}\n\nexport async function getMainSkillptions() {\n  const response = await customAxios.get<SelectProperty[]>('/mainOptions');\n  return response.data;\n}\n"],"names":["logOnDev","message","process","onRequest","config","method","url","concat","toUpperCase","onResponse","response","status","onResponseError","error","serverError","data","console","log","Promise","reject","customAxios","axios","create","baseURL","timeout","headers","axiosInstance","interceptors","request","use","Loading","_jsx","className","children","src","loadingImage","loading","alt","parserPeriod","date","year","differenceInYears","Date","end","start","month","differenceInMonths","isZero","noYear","numberOfMonths","noNumberOfMonths","notionColorSet","red","bg","text","brown","purple","yellow","green","lightGreen","blue","orange","default","grey","gray","pink","_ref","color","selectedItems","size","label","clickable","handleChipSelect","isSelected","indexOf","selected","setSelected","useState","icon","CheckIcon","notionColor","isMainSkillChip","customTheme","createTheme","components","MuiChip","styleOverrides","root","backgroundColor","borderColor","ThemeProvider","theme","Chip","sx","borderRadius","_jsxs","variant","onClick","handleClick","prevState","info","filters","period","boldSentence","experience","rich_text","filter","rich","annotations","bold","map","plain_text","content","join","split","projectData","id","companyId","company","relation","name","title","mainSkills","mainSkill","multi_select","skills","skill","role","description","numberOfParticipants","number","isPrintMode","useAppSelector","state","settings","mode","href","target","rel","LabelIcon","fontSize","Typography","gutterBottom","Box","Stack","direction","spacing","select","DChip","index","boldTexts","includes","first","last","length","_Fragment","props","companyData","type","startDate","format","endDate","scale","department","pointColor","isWave","useMemo","style","subInfo","project","SubListItem","isLastCompany","useTheme","palette","options","colorOptions","onChange","clickedChip","string","replace","letter","flexWrap","useFlexGap","ToggleChip","contents","link","PointStackCard","card","prefix","suffix","filterDefault","Main","DB_COMPANY_DATAS","COMPANY_DATA","DB_PROJECT_DATAS","PROJECT_DATA","sortValue","setSortValue","selectedChips","setSelectedChips","companyQuery","useQuery","async","get","getCompanies","query","properties","projectQuery","getProjects","mainSkillSelectOptions","params","getSkillOptions","property","companiesData","undefined","projectsData","toyProjectData","parseCompanyQuery","_selectedChips$compan","sort","firstObject","secondObject","order","reverse","companyLength","parseProjectQuery","skillInfo","JSON","stringify","forEach","item","skillRegex","RegExp","test","companies","skillOptions","DB_SKILL","handleChange","option","key","prevChips","newChips","parse","chip","useEffect","prev","isLoading","FilterOption","FormControl","m","minWidth","InputLabel","Select","labelId","value","event","MenuItem","CardListItem"],"sourceRoot":""}